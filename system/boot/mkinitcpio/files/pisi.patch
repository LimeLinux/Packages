diff -Nuar mkinitcpio-20.orig/hooks/udev mkinitcpio-20/hooks/udev
--- mkinitcpio-20.orig/hooks/udev	1970-01-01 02:00:00.000000000 +0200
+++ mkinitcpio-20/hooks/udev	2016-07-21 04:34:38.880865000 +0300
@@ -0,0 +1,22 @@
+#!/usr/bin/bash
+
+run_earlyhook() {
+    kmod static-nodes --format=tmpfiles --output=/run/tmpfiles.d/kmod.conf
+    systemd-tmpfiles --prefix=/dev --create --boot
+    /usr/lib/systemd/systemd-udevd --daemon --resolve-names=never
+    udevd_running=1
+}
+
+run_hook() {
+    msg ":: Triggering uevents..."
+    udevadm trigger --action=add --type=subsystems
+    udevadm trigger --action=add --type=devices
+    udevadm settle
+}
+
+run_cleanuphook() {
+    udevadm control --exit
+    udevadm info --cleanup-db
+}
+
+# vim: set ft=sh ts=4 sw=4 et:
diff -Nuar mkinitcpio-20.orig/init mkinitcpio-20/init
--- mkinitcpio-20.orig/init	2016-07-02 22:18:11.000000000 +0300
+++ mkinitcpio-20/init	2016-07-21 04:25:22.998323000 +0300
@@ -11,6 +11,8 @@
 mount -t sysfs sys /sys -o nosuid,noexec,nodev
 mount -t devtmpfs dev /dev -o mode=0755,nosuid
 mount -t tmpfs run /run -o nosuid,nodev,mode=0755
+mkdir -m 0755 /dev/pts
+mount -t devpts -o gid=5,mode=620 devpts /dev/pts
 mkdir -m755 /run/initramfs
 
 # parse the kernel command line
diff -Nuar mkinitcpio-20.orig/install/base mkinitcpio-20/install/base
--- mkinitcpio-20.orig/install/base	2016-07-02 22:18:11.000000000 +0300
+++ mkinitcpio-20/install/base	2016-07-21 04:50:07.700582133 +0300
@@ -21,7 +21,6 @@
 
     add_file "/usr/lib/initcpio/init_functions" "/init_functions"
     add_file "/usr/lib/initcpio/init" "/init"
-    add_file "/usr/lib/modprobe.d/usb-load-ehci-first.conf"
 }
 
 help() {
diff -Nuar mkinitcpio-20.orig/install/systemd mkinitcpio-20/install/systemd
--- mkinitcpio-20.orig/install/systemd	1970-01-01 02:00:00.000000000 +0200
+++ mkinitcpio-20/install/systemd	2016-07-21 04:39:33.467345000 +0300
@@ -0,0 +1,187 @@
+#!/bin/bash
+
+strip_quotes() {
+  local len=${#1} quotes=$'[\'"]' str=${!1}
+
+  if [[ ${str:0:1} = ${str: -1} && ${str:0:1} = $quotes ]]; then
+    printf -v "$1" %s "${str:1:-1}"
+  fi
+}
+
+add_udev_rule() {
+    # Add an udev rules file to the initcpio image. Dependencies on binaries
+    # will be discovered and added.
+    #   $1: path to rules file (or name of rules file)
+
+    local rules= rule= key= value= binary=
+
+    rules=$(PATH=/usr/lib/udev/rules.d:/lib/udev/rules.d type -P "$1")
+    if [[ -z $rules ]]; then
+        # complain about not found rules
+        return 1
+    fi
+
+    add_file "$rules"
+
+    while IFS=, read -ra rule; do
+        # skip empty lines, comments
+        [[ -z $rule || $rule = @(+([[:space:]])|#*) ]] && continue
+
+        for pair in "${rule[@]}"; do
+            IFS=' =' read -r key value <<< "$pair"
+            case $key in
+                RUN@({program}|+)|IMPORT{program}|ENV{REMOVE_CMD})
+                    strip_quotes 'value'
+                    # just take the first word as the binary name
+                    binary=${value%% *}
+                    [[ ${binary:0:1} == '$' ]] && continue
+                    if [[ ${binary:0:1} != '/' ]]; then
+                        binary=$(PATH=/usr/lib/udev:/lib/udev type -P "$binary")
+                    fi
+                    add_binary "$binary"
+                    ;;
+            esac
+        done
+    done <"$rules"
+}
+
+add_systemd_unit() {
+    # Add a systemd unit file to the initcpio image. Hard dependencies on binaries
+    # and other unit files will be discovered and added.
+    #   $1: path to rules file (or name of rules file)
+
+    local unit= rule= entry= key= value= binary= dep=
+
+    unit=$(PATH=/usr/lib/systemd/system:/lib/systemd/system type -P "$1")
+    if [[ -z $unit ]]; then
+        # complain about not found unit file
+        return 1
+    fi
+
+    add_file "$unit"
+
+    while IFS='=' read -r key values; do
+        read -ra values <<< "$values"
+
+        case $key in
+            Requires|OnFailure)
+                # only add hard dependencies (not Wants)
+                map add_systemd_unit "${values[@]}"
+                ;;
+            Exec*)
+                # don't add binaries unless they are required
+                if [[ ${values[0]:0:1} != '-' ]]; then
+                    add_binary "${values[0]}"
+                fi
+                ;;
+        esac
+
+    done <"$unit"
+
+    # preserve reverse soft dependency
+    for dep in {/usr,}/lib/systemd/system/*.wants/${unit##*/}; do
+        if [[ -L $dep ]]; then
+            add_symlink "$dep"
+        fi
+    done
+
+    # add hard dependencies
+    if [[ -d $unit.requires ]]; then
+        for dep in "$unit".requires/*; do
+            add_systemd_unit ${dep##*/}
+        done
+    fi
+}
+
+add_systemd_drop_in() {
+    local unit=$1 dropin_name=$2
+
+    mkdir -p "$BUILDROOT/etc/systemd/system/$unit.d"
+    cat >"$BUILDROOT/etc/systemd/system/$unit.d/$2.conf"
+}
+
+build() {
+    local rules unit
+
+    # from base
+    add_binary /bin/mount
+    add_binary /usr/bin/kmod /usr/bin/modprobe
+    add_binary /usr/lib/systemd/systemd /init
+
+
+    map add_binary \
+        /usr/bin/systemd-tmpfiles \
+        /usr/lib/systemd/systemd-hibernate-resume \
+        /usr/lib/systemd/system-generators/systemd-fstab-generator \
+        /usr/lib/systemd/system-generators/systemd-gpt-auto-generator \
+        /usr/lib/systemd/system-generators/systemd-hibernate-resume-generator
+
+    # udev rules and systemd units
+    map add_udev_rule "$rules" \
+            50-udev-default.rules \
+            60-persistent-storage.rules \
+            64-btrfs.rules \
+            80-drivers.rules \
+            99-systemd.rules
+
+    map add_systemd_unit \
+            initrd-cleanup.service \
+            initrd-fs.target \
+            initrd-parse-etc.service \
+            initrd-root-fs.target \
+            initrd-root-device.target \
+            initrd-switch-root.service \
+            initrd-switch-root.target \
+            initrd-udevadm-cleanup-db.service \
+            initrd.target \
+            kmod-static-nodes.service \
+            local-fs.target \
+            local-fs-pre.target \
+            paths.target \
+            reboot.target \
+            slices.target \
+            sockets.target \
+            swap.target \
+            systemd-fsck@.service \
+            systemd-hibernate-resume@.service \
+            systemd-journald.service \
+            systemd-journald-audit.socket \
+            systemd-journald-dev-log.socket \
+            systemd-tmpfiles-setup-dev.service \
+            systemd-udev-trigger.service \
+            systemd-udevd-control.socket \
+            systemd-udevd-kernel.socket \
+            systemd-udevd.service \
+            timers.target \
+            rescue.target \
+            emergency.target
+
+    add_symlink "/usr/lib/systemd/system/default.target" "initrd.target"
+    add_symlink "/usr/lib/systemd/system/ctrl-alt-del.target" "reboot.target"
+
+    # udev wants /etc/group since it doesn't launch with --resolve-names=never
+    add_file "/etc/nsswitch.conf"
+    add_binary "$(readlink -f /usr/lib/libnss_files.so)"
+
+    echo "root:x:0:0:root:/:/bin/sh" >"$BUILDROOT/etc/passwd"
+    echo "root:x:0:root" >"$BUILDROOT/etc/group"
+    echo "root::::::::" >"$BUILDROOT/etc/shadow"
+
+    add_systemd_drop_in systemd-udevd.service resolve-names <<EOF
+[Service]
+ExecStart=
+ExecStart=/usr/lib/systemd/systemd-udevd --resolve-names=never
+EOF
+}
+
+help() {
+    cat <<HELPEOF
+This will install a basic systemd setup in your initramfs, and is meant to
+replace the 'base', 'usr', 'udev' and 'timestamp' hooks. Other hooks with runtime
+components will need to be ported, and will not work as intended. You also may
+wish to still include the 'base' hook (before this hook) to ensure that a
+rescue shell exists on your initramfs.
+HELPEOF
+}
+
+# vim: set ft=sh ts=4 sw=4 et:
\ No newline at end of file
diff -Nuar mkinitcpio-20.orig/install/udev mkinitcpio-20/install/udev
--- mkinitcpio-20.orig/install/udev	1970-01-01 02:00:00.000000000 +0200
+++ mkinitcpio-20/install/udev	2016-07-21 04:37:30.954723000 +0300
@@ -0,0 +1,28 @@
+#!/bin/bash
+
+build() {
+    local rules tool
+
+    add_binary /usr/lib/systemd/systemd-udevd
+    add_binary /usr/bin/udevadm
+    add_binary /usr/bin/systemd-tmpfiles
+
+    for rules in 50-udev-default.rules 60-persistent-storage.rules 64-btrfs.rules 80-drivers.rules; do
+        add_file "/usr/lib/udev/rules.d/$rules"
+    done
+    for tool in ata_id scsi_id; do
+        add_file "/usr/lib/udev/$tool"
+    done
+
+    add_runscript
+}
+
+help() {
+    cat <<HELPEOF
+This hook will use udev to create your root device node and detect the needed
+modules for your root device. It is also required for firmware loading in
+initramfs. It is recommended to use this hook.
+HELPEOF
+}
+
+# vim: set ft=sh ts=4 sw=4 et:
diff -Nuar mkinitcpio-20.orig/mkinitcpio.conf mkinitcpio-20/mkinitcpio.conf
--- mkinitcpio-20.orig/mkinitcpio.conf	2016-07-02 22:18:11.000000000 +0300
+++ mkinitcpio-20/mkinitcpio.conf	2016-07-21 04:45:42.366286897 +0300
@@ -49,7 +49,7 @@
 #
 ##   NOTE: If you have /usr on a separate partition, you MUST include the
 #    usr, fsck and shutdown hooks.
-HOOKS="base udev autodetect modconf block filesystems keyboard fsck"
+HOOKS="base udev autodetect modconf block filesystems keyboard fsck systemd"
 
 # COMPRESSION
 # Use this to compress the initramfs image. By default, gzip compression
