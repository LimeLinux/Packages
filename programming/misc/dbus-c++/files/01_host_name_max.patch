Description: Avoid relying on max host name length
 Fixes FTBFS on Debian GNU/kFreeBSD.
Author: Robert Millan <rmh.debian@aybabtu.com>
Bug-Debian: http://bugs.debian.org/542887
Last-Update: 2011-12-09

--- a/examples/echo/echo-server.cpp
+++ b/examples/echo/echo-server.cpp
@@ -3,6 +3,7 @@
 #endif
 
 #include "echo-server.h"
+#include "xgethostname.h"
 #include <unistd.h>
 #include <stdlib.h>
 #include <signal.h>
@@ -61,9 +62,9 @@
 std::map< std::string, std::string > EchoServer::Info()
 {
   std::map< std::string, std::string > info;
-  char hostname[HOST_NAME_MAX];
+  char *hostname;
 
-  gethostname(hostname, sizeof(hostname));
+  hostname = xgethostname ();
   info["hostname"] = hostname;
   info["username"] = getlogin();
 
--- a/examples/echo/Makefile.am
+++ b/examples/echo/Makefile.am
@@ -4,7 +4,7 @@
 
 noinst_PROGRAMS = echo-server
 
-echo_server_SOURCES = echo-server-glue.h echo-server.h echo-server.cpp
+echo_server_SOURCES = echo-server-glue.h echo-server.h echo-server.cpp xgethostname.c
 echo_server_LDADD = $(top_builddir)/src/libdbus-c++-1.la
 
 echo-server-glue.h: echo-introspect.xml
--- /dev/null
+++ b/examples/echo/xgethostname.c
@@ -0,0 +1,82 @@
+/* xgethostname.c -- return current hostname with unlimited length
+
+   Copyright (C) 1992, 1996, 2000, 2001, 2003, 2004, 2005, 2006 Free
+   Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* written by Jim Meyering */
+
+#include <config.h>
+
+/* Specification.  */
+#include "xgethostname.h"
+
+#include <stdlib.h>
+#include <errno.h>
+#include <unistd.h>
+
+#ifndef ENAMETOOLONG
+# define ENAMETOOLONG 0
+#endif
+
+#ifndef INITIAL_HOSTNAME_LENGTH
+# define INITIAL_HOSTNAME_LENGTH 34
+#endif
+
+/* Return the current hostname in malloc'd storage.
+   If malloc fails, exit.
+   Upon any other failure, return NULL and set errno.  */
+char *
+xgethostname (void)
+{
+  char *hostname = NULL, *tmp;
+  size_t size = INITIAL_HOSTNAME_LENGTH;
+
+  while (1)
+    {
+      /* Use SIZE_1 here rather than SIZE to work around the bug in
+	 SunOS 5.5's gethostname whereby it NUL-terminates HOSTNAME
+	 even when the name is as long as the supplied buffer.  */
+      size_t size_1;
+
+      tmp = realloc (hostname, size);
+      if (! tmp)
+	{
+	  perror ("realloc");
+	  exit (1);
+	}
+      hostname = tmp;
+      size_1 = size - 1;
+      hostname[size_1 - 1] = '\0';
+      errno = 0;
+
+      if (gethostname (hostname, size_1) == 0)
+	{
+	  if (! hostname[size_1 - 1])
+	    break;
+	}
+      else if (errno != 0 && errno != ENAMETOOLONG && errno != EINVAL
+	       /* OSX/Darwin does this when the buffer is not large enough */
+	       && errno != ENOMEM)
+	{
+	  int saved_errno = errno;
+	  free (hostname);
+	  errno = saved_errno;
+	  return NULL;
+	}
+    }
+
+  return hostname;
+}
--- /dev/null
+++ b/examples/echo/xgethostname.h
@@ -0,0 +1,9 @@
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+char *xgethostname (void);
+
+#ifdef __cplusplus
+}
+#endif
--- a/examples/echo_ecore/echo-server.cpp
+++ b/examples/echo_ecore/echo-server.cpp
@@ -3,6 +3,7 @@
 #endif
 
 #include "echo-server.h"
+#include "xgethostname.h"
 #include <unistd.h>
 #include <stdlib.h>
 #include <signal.h>
@@ -61,9 +62,9 @@
 std::map< std::string, std::string > EchoServer::Info()
 {
   std::map< std::string, std::string > info;
-  char hostname[HOST_NAME_MAX];
+  char *hostname;
 
-  gethostname(hostname, sizeof(hostname));
+  hostname = xgethostname ();
   info["hostname"] = hostname;
   info["username"] = getlogin();
 
--- a/examples/echo_ecore/Makefile.am
+++ b/examples/echo_ecore/Makefile.am
@@ -7,7 +7,7 @@
 noinst_PROGRAMS = echo-server
 endif
 
-echo_server_SOURCES = echo-server-glue.h echo-server.h echo-server.cpp
+echo_server_SOURCES = echo-server-glue.h echo-server.h echo-server.cpp xgethostname.c
 echo_server_LDADD = $(top_builddir)/src/integration/ecore/libdbus-c++-ecore-1.la \
 	$(top_builddir)/src/libdbus-c++-1.la \
 	$(ecore_LIBS)
--- /dev/null
+++ b/examples/echo_ecore/xgethostname.c
@@ -0,0 +1,82 @@
+/* xgethostname.c -- return current hostname with unlimited length
+
+   Copyright (C) 1992, 1996, 2000, 2001, 2003, 2004, 2005, 2006 Free
+   Software Foundation, Inc.
+
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* written by Jim Meyering */
+
+#include <config.h>
+
+/* Specification.  */
+#include "xgethostname.h"
+
+#include <stdlib.h>
+#include <errno.h>
+#include <unistd.h>
+
+#ifndef ENAMETOOLONG
+# define ENAMETOOLONG 0
+#endif
+
+#ifndef INITIAL_HOSTNAME_LENGTH
+# define INITIAL_HOSTNAME_LENGTH 34
+#endif
+
+/* Return the current hostname in malloc'd storage.
+   If malloc fails, exit.
+   Upon any other failure, return NULL and set errno.  */
+char *
+xgethostname (void)
+{
+  char *hostname = NULL, *tmp;
+  size_t size = INITIAL_HOSTNAME_LENGTH;
+
+  while (1)
+    {
+      /* Use SIZE_1 here rather than SIZE to work around the bug in
+	 SunOS 5.5's gethostname whereby it NUL-terminates HOSTNAME
+	 even when the name is as long as the supplied buffer.  */
+      size_t size_1;
+
+      tmp = realloc (hostname, size);
+      if (! tmp)
+	{
+	  perror ("realloc");
+	  exit (1);
+	}
+      hostname = tmp;
+      size_1 = size - 1;
+      hostname[size_1 - 1] = '\0';
+      errno = 0;
+
+      if (gethostname (hostname, size_1) == 0)
+	{
+	  if (! hostname[size_1 - 1])
+	    break;
+	}
+      else if (errno != 0 && errno != ENAMETOOLONG && errno != EINVAL
+	       /* OSX/Darwin does this when the buffer is not large enough */
+	       && errno != ENOMEM)
+	{
+	  int saved_errno = errno;
+	  free (hostname);
+	  errno = saved_errno;
+	  return NULL;
+	}
+    }
+
+  return hostname;
+}
--- /dev/null
+++ b/examples/echo_ecore/xgethostname.h
@@ -0,0 +1,9 @@
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+char *xgethostname (void);
+
+#ifdef __cplusplus
+}
+#endif
