diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 22a4b68..657acbf 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -1495,12 +1495,11 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 			Enable intel iommu driver.
 		off
 			Disable intel iommu driver.
-		igfx_off [Default Off]
-			By default, gfx is mapped as normal device. If a gfx
-			device has a dedicated DMAR unit, the DMAR unit is
-			bypassed by not enabling DMAR with this option. In
-			this case, gfx device will use physical address for
-			DMA.
+		igfx_on [Default Off]
+			By default, the gfx's DMAR unit is bypassed by not enabling
+			DMAR with this option. So the gfx device will use physical
+			address for DMA. When this option is enabled it the gfx is
+			mapped as normal device.
 		forcedac [x86_64]
 			With this option iommu will not optimize to look
 			for io virtual address below 32-bit forcing dual
diff --git a/drivers/iommu/intel-iommu.c b/drivers/iommu/intel-iommu.c
index d65cf42..55f0b22 100644
--- a/drivers/iommu/intel-iommu.c
+++ b/drivers/iommu/intel-iommu.c
@@ -492,7 +492,8 @@ int dmar_disabled = 1;
 int intel_iommu_enabled = 0;
 EXPORT_SYMBOL_GPL(intel_iommu_enabled);
 
-static int dmar_map_gfx = 1;
+/* disabled by default; causes way too many issues */
+static int dmar_map_gfx = 0;
 static int dmar_forcedac;
 static int intel_iommu_strict;
 static int intel_iommu_superpage = 1;
@@ -550,9 +551,10 @@ static int __init intel_iommu_setup(char *str)
 		} else if (!strncmp(str, "off", 3)) {
 			dmar_disabled = 1;
 			pr_info("IOMMU disabled\n");
-		} else if (!strncmp(str, "igfx_off", 8)) {
-			dmar_map_gfx = 0;
-			pr_info("Disable GFX device mapping\n");
+		} else if (!strncmp(str, "igfx_on", 7)) {
+			dmar_map_gfx = 1;
+ 			printk(KERN_INFO
+				"Intel-IOMMU: enabled GFX device mapping\n");
 		} else if (!strncmp(str, "forcedac", 8)) {
 			pr_info("Forcing DAC for PCI devices\n");
 			dmar_forcedac = 1;
